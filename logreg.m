
data = load('networkdiffdatarand.txt');
X = data(1:5000, 1:9); y = data(1:5000, 10);
Xtest = data(5001:7000, 1:9);
ytest = data(5001:7000, 10);
plotData(X(:,1:2), y);

X = [ones(size(X,1),1), X];
Xtest = [ones(size(Xtest,1),1), Xtest];
% Put some labels 
hold on;

%Labels and Legend
xlabel('Feature1')
ylabel('Feature2')

% Specified in plot order
legend('y = 1', 'y = 0')
hold off;

% Initialize fitting parameters
initial_theta = zeros(size(X, 2), 1);

% Set regularization parameter lambda to 1
lambda = 1000;

% Compute and display initial cost and gradient for regularized logistic
% regression
[cost, grad] = costFunctionReg(initial_theta, X, y, lambda);

fprintf('Cost at initial theta (zeros): %f\n', cost);

fprintf('\nProgram paused. Press enter to continue.\n');
pause;

initial_theta = zeros(size(X, 2), 1);

% Set regularization parameter lambda to 1 (you should vary this)
lambda = 1000;

% Set Options
options = optimset('GradObj', 'on', 'MaxIter', 400);

% Optimize
[theta, J, exit_flag] = ...
	fminunc(@(t)(costFunctionReg(t, X, y, lambda)), initial_theta, options);


% Compute accuracy on our training set
p = predict(theta, Xtest);

fprintf('Test set Accuracy: %f\n', mean(double(p == ytest)) * 100);

% You need to return these values correctly
error_train = zeros(10, 1);
error_val   = zeros(10, 1);
grad = zeros(10,1);
lambda=1000;
%j=1;

for i = [[500,1000,1500,2000,2500,3000,3500,4000,4500,5000]; 1:10]
[theta, J, exit_flag] = ...
	fminunc(@(t)(costFunctionReg(t, X(1:i(1),:), y(1:i(1)), lambda)), initial_theta, options);
%size(theta)
%size(X)
[error_train(i(2)),dummy] = costFunctionReg(theta,X(1:i(1),:),y(1:i(1)),0);
[error_val(i(2)),dummy] = costFunctionReg(theta,Xtest,ytest,0);

%j=j+1;

end

plot(1:10, error_train, 1:10, error_val);
title('Learning curve for logistic regression')
legend('Train', 'Cross Validation')
xlabel('Number of training examples')
ylabel('Error')
axis([0 10 0 1])

fprintf('# Training Examples\tTrain Error\tCross Validation Error\n');
for i = 1:10
    fprintf('  \t%d\t\t%f\t%f\n', i, error_train(i), error_val(i));
end
