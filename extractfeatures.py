import os,time,datetime
import subprocess as sp

incpackets=0
outpackets=0
totalsec=0

def calcTimeDiff(start_time,end_time):
	t1 = time.strptime(start_time,'%H:%M:%S')
	t2 = time.strptime(end_time,'%H:%M:%S')
	totalsec = datetime.timedelta(hours=t2.tm_hour-t1.tm_hour,minutes=\
	t2.tm_min-t1.tm_min,seconds=t2.tm_sec-t1.tm_sec).total_seconds()
	
	return totalsec
	
def extractMyIP(filename):
	#tshark -r ucbrowser.pcap -t e -T fields -E separator=, -e ip.src | awk 'NR==1; END{print}'
	cmd = "tshark -r "+str(filename)+" -t e -T fields -E separator=, -e \
	ip.src | awk 'NR==1; END{print}'"
	
	p1 = sp.Popen(cmd,stdout=sp.PIPE,stderr=sp.PIPE,shell=True)
	output = p1.communicate()[0]
	myip = output.split("\n")[0]
	return myip

def extractFeature1(filename,myip):
	#for feature1
	#tshark -r ucbrowser.pcap -t e -T fields -E separator=, -e frame.len | awk '{ sum += $1 } END { if (NR > 0) print sum / NR }'
	p1=sp.Popen(["tshark","-r",str(filename),"-t","e","-T","fields","-E",\
	"separator=,","-e","frame.len"],stderr=sp.PIPE,stdout=sp.PIPE)
	
	p2=sp.Popen(["awk","{ sum += $1 } END { if (NR > 0) print sum / NR }"],\
	stdin=p1.stdout,stdout=sp.PIPE)
	
	output = p2.communicate()[0]
	feature1 = int(float(output))
	return feature1
	#feature1 extracted

def extractFeature2(filename,myip):
	#for feature2
	#tshark -r ucbrowser.pcap -t e -E separator=, -Y ip.dst==10.8.0.1
	#tshark -r ucbrowser.pcap -t e -E separator=, -Y ip.src==10.8.0.1
	global incpackets
	global outpackets
	p1=sp.Popen(["tshark", "-r", str(filename), "-t", "e","-E","separator=,\
	","-Y","ip.dst=="+str(myip)],stderr=sp.PIPE,stdout=sp.PIPE)
	
	p2=sp.Popen(["wc","-l"],stdin=p1.stdout,stdout=sp.PIPE)
	output= p2.communicate()[0]
	incpackets = int(output)

	p1=sp.Popen(["tshark", "-r", str(filename), "-t", "e","-E","separator=,\
	","-Y","ip.src=="+str(myip)],stderr=sp.PIPE,stdout=sp.PIPE)
	
	p2=sp.Popen(["wc","-l"],stdin=p1.stdout,stdout=sp.PIPE)
	output= p2.communicate()[0]
	outpackets = int(output)

	feature2 = float("{0:.3f}".format(float(float(incpackets)/float(outpackets))))
	#feature2 extracted
	return feature2

def extractFeature3(filename,myip):
	#for feature3
	# tshark -r ucbrowser.pcap -T fields -e tcp.stream -Y ip.src==10.8.0.1 |sed '/^\s*$/d'| sort -n | uniq -c | awk -v count=0 '{count= count + $1} END {print count/(NR+1)}'
	cmd = " tshark -r "+str(filename)+" -T fields -e tcp.stream -Y ip.src=="+\
	str(myip)+" |sed '/^\s*$/d'| sort -n | uniq -c | awk -v count=0 '{count= \
	count + $1} END {print count/(NR+1)}'"
	
	p1 = sp.Popen(cmd,stdout=sp.PIPE,stderr=sp.PIPE,shell=True)
	output = "{0:.3f}".format(float(p1.communicate()[0]))
	feature3 = float(output)
	return feature3
	#feature3 extracted

def extractFeature4(filename,myip):
	# tshark -r ucbrowse.pcap -T fields -e tcp.stream -Y ip.dst==10.8.0.1 |sed '/^\s*$/d'| sort -n | uniq -c | awk -v count=0 '{count= count + $1} END {print count/(NR+1)}'
	cmd = " tshark -r "+str(filename)+" -T fields -e tcp.stream -Y ip.dst=="+\
	str(myip)+" |sed '/^\s*$/d'| sort -n | uniq -c | awk -v count=0 \
	'{count= count + $1} END {print count/(NR+1)}'"
	
	p1 = sp.Popen(cmd,stdout=sp.PIPE,stderr=sp.PIPE,shell=True)
	output = "{0:.3f}".format(float(p1.communicate()[0]))
	feature4 = float(output)
	return feature4
	#feature4 extracted

def extractFeature5(filename,myip):
	#for feature5
	#tshark -r ucbrowser.pcap -t e -T fields -E separator=, -e frame.time | awk 'NR==1'
	#tshark -r ucbrowser.pcap -t e -T fields -E separator=, -e frame.time | awk 'END{print}'
	global totalsec
	cmd = "tshark -r "+str(filename)+" -t e -T fields -E separator=, -e frame.time \
	| awk 'NR==1'"
	p1 = sp.Popen(cmd,stdout=sp.PIPE,stderr=sp.PIPE,shell=True)
	output = p1.communicate()[0]
	output = output.strip('\n')
	start_time = output.split(" ")[3]
	start_time = start_time.split(".")[0]

	cmd = "tshark -r "+str(filename)+" -t e -T fields -E separator=, -e frame.time \
	| awk 'END{print}'"
	p1 = sp.Popen(cmd,stdout=sp.PIPE,stderr=sp.PIPE,shell=True)
	output = p1.communicate()[0]
	output = output.strip('\n')
	end_time = output.split(" ")[3]
	end_time = end_time.split(".")[0]

	totalsec = calcTimeDiff(start_time,end_time)
	feature5 = float("{0:.3f}".format(float(float(outpackets)/float(totalsec))))
	return feature5
	#feature5 extracted

def extractFeature6(filename,myip):
	#for feature6
	global incpackets
	global totalsec
	feature6 = float("{0:.3f}".format(float(float(incpackets)/float(totalsec))))
	return feature6
	#feature6 extracted

def extractFeature7(filename,myip):
	#for feature7
	#tshark -r ucbrowser.pcap -t e -T fields -E separator=, -e frame.len | awk '{if(max<$1){max=$1;ans=$1}}END{print ans}'
	cmd = "tshark -r "+str(filename)+" -t e -T fields -E separator=, -e frame.len \
	| awk '{if(max<$1){max=$1;ans=$1}}END{print ans}'"
	p1= sp.Popen(cmd,stdout=sp.PIPE, stdin=sp.PIPE, stderr=sp.PIPE, shell= True)
	output = p1.communicate()[0]
	feature7 = int(output)
	return feature7
	#feature7 extracted

def extractFeature8(filename,myip):
	#for feature8
	#tshark -r ucbrowser.pcap -t e -T fields -E separator=, -e \frame.time_epoch -Y ip.src==10.8.0.1 | awk -v start=0.0 -v diff=100.0 -v end=0.0 -v prevtime=0.0 'NR==1 {start=$1; prevtime=$1;} {if ((($1-prevtime) < diff) && (NR != 1)){start=prevtime; end=$1; diff=end-start;}} {prevtime=$1;} END {print start,end}'
	cmd = "tshark -r "+str(filename)+" -t e -T fields -E separator=, -e frame.time_epoch \
	-Y ip.src=="+str(myip)+" | awk -v start=0.0 -v diff=100.0 -v end=0.0 -v prevtime=0.0 \
	'NR==1 {start=$1; prevtime=$1;} {if ((($1-prevtime) < diff) && (NR != 1)){start=prevtime; \
	end=$1; diff=end-start;}} {prevtime=$1;} END {print start,end}'"
	p1 = sp.Popen(cmd,stdout=sp.PIPE,stdin=sp.PIPE,stderr=sp.PIPE, shell=True)
	output = p1.communicate()[0]
	start_time = float(output.split(" ")[0])
	end_time = float(output.split(" ")[1])

	start_time = time.ctime(start_time).split(" ")[3]
	end_time = time.ctime(end_time).split(" ")[3]

	mindiff = calcTimeDiff(start_time,end_time)
	feature8 = float("{0:.3f}".format(float(mindiff)))
	return feature8
	#feature8 extracted

def extractFeature9(filename,myip):
	#for feature9
	cmd = "tshark -r "+str(filename)+" -t e -T fields -E separator=, -e \
	frame.time_epoch -Y ip.dst=="+str(myip)+" | awk -v start=0.0 -v diff=100.0 \
	-v end=0.0 -v prevtime=0.0 'NR==1 {start=$1; prevtime=$1;} {if ((($1-prevtime) \
	< diff) && (NR != 1)){start=prevtime; end=$1; diff=end-start;}} {prevtime=$1;} \
	END {print start,end}'"
	p1 = sp.Popen(cmd,stdout=sp.PIPE,stdin=sp.PIPE,stderr=sp.PIPE, shell=True)
	output = p1.communicate()[0]
	start_time = float(output.split(" ")[0])
	end_time = float(output.split(" ")[1])

	start_time = time.ctime(start_time).split(" ")[3]
	end_time = time.ctime(end_time).split(" ")[3]

	mindiff = calcTimeDiff(start_time,end_time)
	feature9 = float("{0:.3f}".format(float(mindiff)))
	return feature9
	#feature9 extracted

if __name__=="__main__":
	
	filename = raw_input("Enter the name of the pcap dump file: ")
	datasetfile = raw_input("Enter the name of the dataset file: ")
	myip = extractMyIP(filename)
	print "Source IP: "+str(myip)
	feature1 = extractFeature1(filename,myip)
	print "Average Packet Size: "+str(feature1)
	feature2 = extractFeature2(filename,myip)
	print "Ratio of incoming to outgoing packets: "+str(feature2)
	feature3 = extractFeature3(filename,myip)
	print "Packets Sent per Flow: "+str(feature3)
	feature4 = extractFeature4(filename,myip)
	print "Packets Received per Flow: "+str(feature4)
	feature5 = extractFeature5(filename,myip)
	print "Packets sent per Second: "+str(feature5)
	feature6 = extractFeature6(filename,myip)
	print "Packets Received per Second: "+str(feature6)
	feature7 = extractFeature7(filename,myip)
	print "Maximum Packet Size: "+str(feature7)
	feature8 = extractFeature8(filename,myip)
	print "Minimum Time Interval b/w Packets Sent: "+str(feature8)
	feature9 = extractFeature9(filename,myip)
	print "Minimum Time Interval b/w Packets Received: "+str(feature9)
	
	featurebuff=str(feature1)+","+str(feature2)+","+str(feature3)+","+str(feature4)+","+\
	str(feature5)+","+str(feature6)+","+str(feature7)+","+str(feature8)+","+\
	str(feature9)+","+"0\n"
	
	fp = open(str(datasetfile),"a")
	fp.write(featurebuff)
	fp.close()
	
